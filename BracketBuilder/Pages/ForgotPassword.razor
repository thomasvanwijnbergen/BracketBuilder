@page "/forgot/{AccountIdStr}"
@page "/forgot/{AccountIdStr}/{IdentificationStr}"

@inject NavigationManager navManager;
@inject IDatabaseService databaseService;
@inject AuthenticationStateProvider authProvider;
@inject ISnackbar snackBar;

@if (done)
{
    <MudCard Style="max-width:25rem;">
        <MudCardHeader><MudText Typo="Typo.h3">Forgot password</MudText></MudCardHeader>
        <MudCardContent>
            <MudExtensions.MudPasswordField @bind-Value="@newPassword" Label="New password" />
            <MudExtensions.MudPasswordField @bind-Value="@newConfirmStr" Label="Confirm password" />
        </MudCardContent>
        <MudCardActions>
            <MudButton @onclick="ChangePassword" Variant="Variant.Filled" Color="Color.Primary">Change password</MudButton>
        </MudCardActions>
    </MudCard>
}
else
{
    @Output
}


@code {
    [Parameter]
    public string? IdentificationStr { get; set; } = null;

    [Parameter]
    public string? AccountIdStr { get; set; } = null;

    public int? AccountId => ParsingExtention.IntTryParse(AccountIdStr);
    private bool done = false;

    public RenderFragment Output = @<div>Processing...</div>;

    private string newPassword = string.Empty;
    private string newConfirmStr = string.Empty;


    private async Task ChangePassword()
    {
        if (string.IsNullOrEmpty(newPassword) ||
            string.IsNullOrEmpty(newConfirmStr) ||
            string.IsNullOrEmpty(IdentificationStr))
        {
            snackBar.Add("All fields must be filled in!", Severity.Error);
            return;
        }
        if (newPassword == newConfirmStr)
        {
            //If passwords match
            await databaseService.UpdateUser((int)AccountId, password: newPassword, Identification: string.Empty);
            snackBar.Add("Password has been updated", Severity.Success);
            Output =@<div>Password has been updated</div>;
            done = false; //show the output
        }
        else
        {
            snackBar.Add("Passwords do not match!", Severity.Warning);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        if (IdentificationStr == null || AccountIdStr == null)
            navManager.NavigateTo("/login", true);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (AccountId == null || IdentificationStr == null)
        {
            Output =@<div>Identification Data Error</div>;
            return;
        }

        var userAccount = (await databaseService.GetUsersByFilter(id: (int)AccountId)).FirstOrDefault();
        if (userAccount == null)
        {
            Output =@<div>Account not found!</div>;
            return;
        }

        if (userAccount.Identificaton != IdentificationStr)
        {
            Output =@<div>Identification Failed!</div>;
            return;
        }


        done = true;
    }
}
