@inject IDatabaseService databaseService;
@inject ISnackbar snackBar;
@inject IDialogService dialogService;
@inject DatabaseDTOService dtoService;
@inject RemoteService remoteService;
@inject CommunicationService commService;
@inject NavigationManager navManager;
@inject IDatabaseService databaseService;

<MudDialog>
    <DialogContent>
        <div class="d-flex flex-column gap-3">
            @if (Account != null)
            {
                <div>
                    <Avatar Account="Account" showName="false"/>
                    <MudLink Color="Color.Default" Href=@($"/profile/{Account.Id}") OnClick=@(() => navManager.NavigateTo($"/profile/{Account.Id}",true)) Class="mx-4">@Account.DisplayName</MudLink>
                </div>

                <MudContainer Class="d-flex flex-column">
                    <MudNumericField @ref="Field" AutoFocus="true" @onkeyup="@Enter" HideSpinButtons="true" Label="@Context" T="int" @bind-Value="Score"></MudNumericField>
                </MudContainer>
            }
            else
            {
                <MudText>
                    Player was null!
                </MudText>
            }
        </div>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="UpdateScore" >Update @Context</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance? MudDialog { get; set; }

    [Parameter]
    public Player Player { get; set; }

    [Parameter]
    public UserAccount Account { get; set; }

    [Parameter]
    public string Type { get; set; } = nameof(Models.Player.Score);

    [Parameter]
    public string Context { get; set; } = nameof(Models.Player.Score);

    [Parameter]
    public int Score { get; set; } = 0;

    private MudNumericField<int> Field { get; set; }

    void Cancel() => MudDialog?.Cancel();
    void Done() => MudDialog?.Close(DialogResult.Ok("Success"));

    public void Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            UpdateScore();
        }
    }
    public async void UpdateScore()
    {
        try
        {
            switch (Type)
            {
                case $"{nameof(Models.Player.Score)}":
                    Player.Score = Score;
                    await dtoService.UpdateMatchPlayercouple(Player.Id, Player);
                    break;
                case $"{nameof(UserAccount.AmountOfCompetedTournaments)}":
                    Account.AmountOfCompetedTournaments = Score;
                    await databaseService.UpdateUserByProperty(Account.Id, Type, Score.ToString());
                    break;
                case $"{nameof(UserAccount.AmountOfWonTournaments)}":
                    Account.AmountOfWonTournaments = Score;
                    await databaseService.UpdateUserByProperty(Account.Id, Type, Score.ToString());
                    break;
                case $"{nameof(UserAccount.AmoutOfTimesInFinal)}":
                    Account.AmoutOfTimesInFinal = Score;
                    await databaseService.UpdateUserByProperty(Account.Id, Type, Score.ToString());
                    break;
                case $"{nameof(UserAccount.AmoutOfWonMatches)}":
                    Account.AmoutOfWonMatches = Score;
                    await databaseService.UpdateUserByProperty(Account.Id, Type, Score.ToString());
                    break;
                case $"{nameof(UserAccount.BaseSeedingScore)}":
                    Account.BaseSeedingScore = Score;
                    await databaseService.UpdateUserByProperty(Account.Id, Type, Score.ToString());
                    break;
                default:
                    throw new Exception($"Type:\"{Type}\" is unknown for PointsDialog");
                    break;
            }
            snackBar.Add($"{Context} updated to: {Score}", Severity.Success);
        }
        catch (Exception ex)
        {
            snackBar.Add(ex.Message,Severity.Error);
        }
        Done();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            Field.SelectAsync();
        base.OnAfterRender(firstRender);
    }

}
