@inherits LayoutComponentBase;

@layout MainLayout;
@implements IDisposable;

@inject NavigationManager navManager;
@inject DatabaseDTOService dtoService;


<MudAppBar Style="@(loaded?"":"background: #FFFFFF;")">
    <MudIconButton Color="@Color.Primary"
                    Icon="@Icons.Material.Rounded.Menu"
                    Size="Size.Large"
                    OnClick="@OpenSideMenu" />

                        @{var uri = new Uri(navManager.Uri);}

    @if (uri.Segments.Count() > 3)
    {
        var guidString = uri.Segments[^2].Replace("/", ""); // Get the last segment from the URL
        if (Guid.TryParse(guidString, out var parsedGuid))
        {
            tournamentGuid = parsedGuid;
            var tournament = dtoService.GetTournamentsByFilter(guid: tournamentGuid);
            <ul class="mud-breadcrumbs mud-typography-body1">
                <li class="mud-breadcrumb-item">
                    @{
                        string color = "rgba(0,200,83,1)";
                        if (useDarkMode)
                            color = "rgba(11,186,131,1)";
                    }

                    <a style="color:@color;" href="@($"/tournament/{tournamentGuid}/detail" ?? "#")">
                        <MudIcon Icon="@Icons.Material.Filled.Flag" Size="Size.Small" />
                        @{
                            string? name = "[Not found]";
                            var list = tournament?.GetAwaiter().GetResult();
                            if (list != null && list.Count() > 0)
                            {
                                name = list?.First()?.Name;
                            }
                        }
                        @name
                    </a>
                </li>
            </ul>
        }
    }

    <MudSpacer />
    <DarkModeSwitch />

    <MudDivider Class="mx-6 " DividerType="DividerType.Middle" Style="width: 2px; max-height: 40px;" Vertical="true" />
    <AuthorizeView>
        <Authorized>
            <MudButton Style="width:7%;" OnClick="() => NavigationMenu.Logout(navManager)">Logout</MudButton>
        </Authorized>
        <NotAuthorized>
            <MudButton Style="width:7%;" OnClick="() => NavigationMenu.Login(navManager)">Login</MudButton>
        </NotAuthorized>
    </AuthorizeView>
</MudAppBar>
<MudDrawer Breakpoint="Breakpoint.Md"
            Class="side-menu"
            Elevation="2"
            Open="_open"
            Style="overflow:hidden"
            Variant="@DrawerVariant.Temporary">

    <MudDrawerHeader Class="align-center d-flex align-center pa-0">
        <MudIconButton Color="@Color.Error"
                        Icon="@Icons.Material.Rounded.Close"
                        Size="Size.Large"
                        OnClick="@OpenSideMenu" />

    </MudDrawerHeader>

    <NavigationMenu />

    <MudSpacer />


    @if (_open)
    {
        <div class="d-flex">
            <MudSpacer />
            <MudSwitch Color="Color.Primary" UnCheckedColor="Color.Default" @bind-Checked="pinned">Lock Menu <MudIcon Size="Size.Small" Color="@Color.Primary" Icon="@Icons.Material.Filled.Lock" /></MudSwitch>
            <MudSpacer />
        </div>
        <div class="d-flex">
            <MudSpacer />
            <MudImage Alt="Logo" Src="logo.png" Width="100" Class="mb-4"></MudImage>
            <MudSpacer />
        </div>
    }
    else
    {
        <MudText Typo="Typo.overline" Align="Align.Center">BB</MudText>
    }
</MudDrawer>
<MudMainContent>
    <div class="ma-2">
        @Body
    </div>
</MudMainContent>

@code {
    [CascadingParameter(Name = "loadedLAYOUT")]
    public bool loaded { get; set; }
    [CascadingParameter(Name = "DarkMode")]
    public bool useDarkMode { get; set; }

    protected override void OnInitialized()
    {
        navManager.LocationChanged += Close;
    }

    public void Dispose()
    {
        navManager.LocationChanged -= Close;
    }


    private void Close(object sender, LocationChangedEventArgs e)
    {
        if (!pinned)
        {
            _open = false;
            StateHasChanged();
        }
    }


    private Guid tournamentGuid;

    bool _open = false;
    bool pinned = false;

    void OpenSideMenu()
    {
        _open = !_open;
    }
}